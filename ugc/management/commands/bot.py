from django.core.management.base import BaseCommand
from django.conf import settings

from telegram import Bot
from telegram import Update
from telegram.ext import CallbackContext
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram.ext import CommandHandler
from telegram.ext import Updater
from telegram.utils.request import Request

from ugc.models import Message
from ugc.models import Profile
from ugc.models import SelectedTransport
from ugc.models import SelectedStation
from .parser import  parser_station, parser_all_station, parser_station_n


client_status_station = {}
client_status_transport = {}


def log_errors(f):
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            error_message = f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}'
            print(error_message)
            raise e

    return inner


@log_errors
def do_allstation(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id

    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': update.message.from_user.username,
        }
    )
    if SelectedTransport.objects.filter(profile=p).values_list('transport', flat=True).count() == 0:
        update.message.reply_text(
            text='–£ –≤–∞—Å –Ω–µ—Ç transport'
        )
    elif SelectedTransport.objects.filter(profile=p).values_list('transport', flat=True).count() == 1:
        take_data_transport = SelectedTransport.objects.filter(profile=p).values_list('transport', flat=True)
        transport_one = [x for x in str(take_data_transport[0]).split()]
        give_transport_in_func_one = parser_all_station(transport_one[0], transport_one[1])
        update.message.reply_text(
            text=f'‚ú® –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè {transport_one[0].upper()} üöç: {transport_one[1]}\n {give_transport_in_func_one}',
        )
    else:
        take_data_transport = SelectedTransport.objects.filter(profile=p).values_list('transport', flat=True)
        transport_one = [x for x in str(take_data_transport[0]).split()]
        transport_two = [x for x in str(take_data_transport[1]).split()]
        give_transport_in_func_one = parser_all_station(transport_one[0], transport_one[1])
        give_transport_in_func_two = parser_all_station(transport_two[0], transport_two[1])

        update.message.reply_text(
            text=f'‚ú® –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè {transport_one[0].upper()} üöç: {transport_one[1]}\n {give_transport_in_func_one}',
        )
        update.message.reply_text(
            text=f'‚ú® –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè {transport_two[0].upper()} üöç: {transport_two[1]} \n {give_transport_in_func_two}',
        )


@log_errors
def do_live_station(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id

    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': update.message.from_user.username,
        }
    )
    if SelectedStation.objects.filter(profile=p).values_list('station', flat=True).count() == 0:
        update.message.reply_text(
            text='–£ –≤–∞—Å –Ω–µ—Ç station'
        )
    elif SelectedStation.objects.filter(profile=p).values_list('station', flat=True).count() == 1:
        take_data_station = SelectedStation.objects.filter(profile=p).values_list('station', flat=True)
        station_one = [x for x in str(take_data_station[0]).split()]
        give_station_in_func_one = parser_station_n(station_one[0], station_one[1], station_one[2])
        # # –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ë–î –∏ –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∑–∞–ø–∏—Ö–Ω—É—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–¥
        update.message.reply_text(
            text=f'‚ú® {station_one[0].upper()} üöç {station_one[1]}\n‚ú® –û—Å—Ç–∞–Ω–æ–≤–∫–∞ üöè: {station_one[2]}'
                 f'\n{f"{give_station_in_func_one[0]}{give_station_in_func_one[1]}"}')
    else:
        take_data_station = SelectedStation.objects.filter(profile=p).values_list('station', flat=True)
        station_one = [x for x in str(take_data_station[0]).split()]
        station_two = [x for x in str(take_data_station[1]).split()]
        give_station_in_func_one = parser_station_n(station_one[0], station_one[1], station_one[2])
        give_station_in_func_two = parser_station_n(station_two[0], station_two[1], station_two[2])
        # # –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ë–î –∏ –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∑–∞–ø–∏—Ö–Ω—É—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–¥
        update.message.reply_text(
            text=f'‚ú® {station_one[0].upper()} üöç {station_one[1]}\n‚ú® –û—Å—Ç–∞–Ω–æ–≤–∫–∞ üöè: {station_one[2]}'
                 f'\n{f"{give_station_in_func_one[0]}{give_station_in_func_one[1]}"}\n')
        update.message.reply_text(
            text=f'‚ú® {station_two[0].upper()} üöç {station_two[1]}\n‚ú® –û—Å—Ç–∞–Ω–æ–≤–∫–∞ üöè: {station_two[2]}'
                 f'\n{f"{give_station_in_func_two[0]}{give_station_in_func_two[1]}"}',
        )


@log_errors
def do_add_station(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id

    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': update.message.from_user.username,
        }
    )
    if SelectedStation.objects.filter(profile=p).values_list('station', flat=True).count() >= 2:
        update.message.reply_text(
            text=f'‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 2-—É—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ ‚ùå'
        )
    else:
        client_status_station[chat_id] = 'wait_for_data_station'
        update.message.reply_text(
            text=f'üõ†–î–æ–±–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É:'
        )


@log_errors
def do_add_transport(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id

    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': update.message.from_user.username,
        }
    )
    if SelectedTransport.objects.filter(profile=p).values_list('transport', flat=True).count() >= 2:
        update.message.reply_text(
            text=f'‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 2-—É—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞‚ùå'
        )
    else:
        client_status_transport[chat_id] = 'wait_for_data_transport'
        update.message.reply_text(
            text=f'üõ†–î–æ–±–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:'
        )
    # not correctly work, need add (add text after the command)
    # –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ë–î –∏ –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∑–∞–ø–∏—Ö–Ω—É—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–¥


@log_errors
def do_dell_transport(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id

    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': update.message.from_user.username,
        }
    )
    if SelectedTransport.objects.filter(profile=p).values_list('transport', flat=True).count() == 0:
        update.message.reply_text(
            text=f'‚ùå –£ –í–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞‚ùå'
        )
    else:
        tran = SelectedTransport.objects.filter(profile=p).delete()
        update.message.reply_text(
            text=f'üõ†{tran} —É–¥–∞–ª–µ–Ω'
        )


@log_errors
def do_dell_station(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id

    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': update.message.from_user.username,
        }
    )
    if SelectedStation.objects.filter(profile=p).values_list('station', flat=True).count() == 0:
        update.message.reply_text(
            text=f'‚ùå –£ –í–∞—Å –Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–æ–∫‚ùå'
        )
    else:
        tran = SelectedStation.objects.filter(profile=p).delete()
        update.message.reply_text(
            text=f'üõ†{tran} —É–¥–∞–ª–µ–Ω'
        )


@log_errors
def do_echo_add(update: Update, context: CallbackContext):
    try:
        chat_id = update.message.chat_id
        text = update.message.text
        # _ - –±—É–ª–µ–≤—ã–π —Ñ–ª–∞–≥, –∫–æ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–ª–∏ –Ω–µ—Ç! p - –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç –≤–∑—è—Ç –∏–∑ –±–∞–∑—ã
        p, _ = Profile.objects.get_or_create(
            external_id=chat_id,
            defaults={
                'name': update.message.from_user.username,
            }
        )
        if chat_id in client_status_station and client_status_station[
            chat_id] == 'wait_for_data_station' and SelectedStation.objects.filter(profile=p).values_list('station',
                                                                                                          flat=True).count() < 2:
            add_data_station = SelectedStation.objects.create(profile=p, station=text)
            add_data_station.save
            del client_status_station[chat_id]
            station_one = [x for x in text.split()]
            update.message.reply_text(
                text=f'‚ú® –ú–∞—Ä—à—Ä—É—Ç –æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ üöè: {station_one[2]} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ'
            )
        # –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ë–î –∏ –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∑–∞–ø–∏—Ö–Ω—É—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–¥
        elif chat_id in client_status_transport and client_status_transport[
            chat_id] == 'wait_for_data_transport' and SelectedTransport.objects.filter(profile=p).values_list(
            'transport',
            flat=True).count() < 2:
            add_data_transport = SelectedTransport.objects.create(profile=p, transport=text)
            add_data_transport.save
            del client_status_transport[chat_id]
            # –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ë–î –∏ –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∑–∞–ø–∏—Ö–Ω—É—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–¥
            update.message.reply_text(
                text=f'‚ú® –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöç: {add_data_transport} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ'
            )

        else:
            hand_add_st = [x for x in text.split(' ')]
            if len(hand_add_st) == 2:
                # hand_trans_data = parser_station(hand_add_st[0], hand_add_st[1])
                # update.message.reply_text(
                #     text=f'‚ú® –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {hand_add_st[1]} {hand_add_st[0].upper()} üöç : \n{hand_trans_data}',
                # )
                hand_trans_data = parser_all_station(hand_add_st[0], hand_add_st[1])
                update.message.reply_text(
                    text=f'‚ú® –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè {hand_add_st[0].upper()} üöç: {hand_add_st[1]}\n {hand_trans_data}',
                )
            else:
                hand_trans_data = parser_station_n(hand_add_st[0], hand_add_st[1], hand_add_st[2])
                update.message.reply_text(
                    text=f'‚ú® {hand_add_st[0].upper()} üöç {hand_add_st[1]}\n‚ú® –û—Å—Ç–∞–Ω–æ–≤–∫–∞ üöè: \n{hand_add_st[2]}\n{f"{hand_trans_data[0]} {hand_trans_data[1]}"}\n'
                )
        Message(
            profile=p,
            text=text,
        ).save()
    except IndexError:
        update.message.reply_text(
            text=f'‚ùå –ù–µ–≤–µ—Ä—ã–π –≤–≤–æ–¥ ‚ùå',
        )


@log_errors
def do_help(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text
    # _ - –±—É–ª–µ–≤—ã–π —Ñ–ª–∞–≥, –∫–æ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–ª–∏ –Ω–µ—Ç! p - –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç –≤–∑—è—Ç –∏–∑ –±–∞–∑—ã
    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': update.message.from_user.username,
        }
    )
    update.message.reply_text(
        text=
        f'\n/all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'
        f'\n/live - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'
        f'\n/sadd - –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ(–Ω–µ –±–æ–ª–µ–µ 2-—É—Ö)'
        f'\n/tadd - –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ(–Ω–µ –±–æ–ª–µ–µ 2-—É—Ö)'
        f'\n/tdell - —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'
        f'\n/sdell - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'
        f'\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–±—É—Å–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –Ω–æ–º–µ—Ä'
        f'\n–ü—Ä–∏–º–µ—Ä: –∞–≤—Ç–æ–±—É—Å 69'
        f'\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –¥–æ –∞–≤—Ç–æ–±—É—Å–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –Ω–æ–º–µ—Ä –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É'
        f'\n–ü—Ä–∏–º–µ—Ä: –∞–≤—Ç–æ–±—É—Å 69 2-–µ –∫–æ–ª—å—Ü–æ',
    )
    Message(
        profile=p,
        text=text,
    ).save()


@log_errors
def do_start(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text
    # _ - –±—É–ª–µ–≤—ã–π —Ñ–ª–∞–≥, –∫–æ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–ª–∏ –Ω–µ—Ç! p - –æ–±—ä–µ–∫—Ç –ø—Ä–æ—Ñ–∏–ª—è, –∫–æ—Ç –≤–∑—è—Ç –∏–∑ –±–∞–∑—ã
    p, _ = Profile.objects.get_or_create(
        external_id=chat_id,
        defaults={
            'name': update.message.from_user.username,
        }
    )
    update.message.reply_text(
        text=f'–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞\n /help',
    )
    Message(
        profile=p,
        text=text,
    ).save()


class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º-–ë–æ—Ç'

    def handle(self, *args, **options):
        request = Request(
            connect_timeout=0.5,
            read_timeout=1.0,
        )
        bot = Bot(
            request=request,
            token=settings.TOKEN,
            # base_url=settings.PROXY_URL,
        )
        print(bot.get_me())
        # 2 -- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        updater = Updater(
            bot=bot,
            use_context=True,
        )


        message_handler2 = CommandHandler('all', do_allstation)
        updater.dispatcher.add_handler(message_handler2)

        message_handler4 = CommandHandler('live', do_live_station)
        updater.dispatcher.add_handler(message_handler4)

        message_handler4 = CommandHandler('tadd', do_add_transport)
        updater.dispatcher.add_handler(message_handler4)

        message_handler5 = CommandHandler('sadd', do_add_station)
        updater.dispatcher.add_handler(message_handler5)

        message_handler6 = CommandHandler('help', do_help)
        updater.dispatcher.add_handler(message_handler6)

        message_handler7 = CommandHandler('start', do_start)
        updater.dispatcher.add_handler(message_handler7)

        message_handler8 = CommandHandler('tdell', do_dell_transport)
        updater.dispatcher.add_handler(message_handler8)

        message_handler9 = CommandHandler('sdell', do_dell_station)
        updater.dispatcher.add_handler(message_handler9)

        message_handler = MessageHandler(Filters.text, do_echo_add)
        updater.dispatcher.add_handler(message_handler)

        # 3 -- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        updater.start_polling()
        updater.idle()
