from aiogram.dispatcher.filters.builtin import CommandStart
from ugc.management.commands.main import dp, adb
from ugc.management.commands.keyboards.markup.markup import keyboard
from ugc.management.commands.utils.funk_async import *
from ugc.management.commands.parser import parser_all_station, parser_station_n


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    if not adb.check_subscriber(message.from_user.id):
        adb.add_subscriber(message.from_user.id)
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å–∫–æ—Ä–µ–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—èüîú /help',
                             reply_markup=keyboard)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ—Å–∫–æ—Ä–µ–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—èüîú /help',
                         reply_markup=keyboard)


async def error(message: types.Message):
    if len(message.text.split(' ')) == 2 and '‚ùå' not in parser_all_station(message.text.split(' ')[0], message.text.split(' ')[1]):
        await message.answer(
            text=f'{message.text} ‚ú® –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè')
        await message.answer(
            text=f"‚¨ÖÔ∏è{parser_all_station(message.text.split(' ')[0], message.text.split(' ')[1])[0]}\n\n‚û°Ô∏è{parser_all_station(message.text.split(' ')[0], message.text.split(' ')[1])[1]}")
    elif len(message.text.split(' ')) > 2  and '‚ùå' not in parser_station_n(message.text.split(' ')[0], message.text.split(' ')[1], message.text.split(' ')[2]):

        await message.answer(
            text=f"‚ú® –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {message.text.split(' ')[0]}, {message.text.split(' ')[1]}\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ üöè {message.text.split(' ')[2]}:")
        await message.answer(
            text=f"{parser_station_n(message.text.split(' ')[0], message.text.split(' ')[1], message.text.split(' ')[2])[0]}\n{parser_station_n(message.text.split(' ')[0], message.text.split(' ')[1], message.text.split(' ')[2])[1]}")
    else:
        await message.answer(text='‚ö†Ô∏è–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞!!')

@dp.message_handler(content_types=['text'])
async def command_start_text(message: types.Message):
    data = {
        '/help': about_help,
        '/tadd': add_new_transport,
        '/sadd': add_new_station,
        '/all': show_save_transport,
        '/live': show_save_station,
        '/tdell': dell_save_transport,
        '/sdell': dell_save_station,
        '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': add_new_transport,
        '–î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É': add_new_station,
        '–ú–∞—Ä—à—Ä—É—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞': show_save_transport,
        '–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏': show_save_station,
        '–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': dell_save_transport,
        '–£–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É': dell_save_station,
    }
    await data.get(message.text, error)(message)
