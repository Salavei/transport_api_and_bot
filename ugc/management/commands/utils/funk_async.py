from aiogram import types
from ugc.management.commands.main import adb
from ugc.management.commands.fsm.fsm import add_transport_start, add_station_start
from ugc.management.commands.parser import *


async def show_save_transport(message: types.Message):
    if not adb.count_transp(*adb.give_user_id(message.from_user.id)):
        await message.answer(text='‚ùå –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ‚ùå')
    elif adb.count_transp(*adb.give_user_id(message.from_user.id)) < 2:
        await message.answer(
            text=f'{adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[0]} ‚ú® –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè')
        await message.answer(
            text=f'‚¨ÖÔ∏è{parser_all_station(*adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[0])[0]}\n\n‚û°Ô∏è{parser_all_station(*adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[0])[1]}')
    else:
        await message.answer(
            text=f'{adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[0]} ‚ú® –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè')
        await message.answer(
            text=f'‚¨ÖÔ∏è{parser_all_station(*adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[0])[0]}\n\n‚û°Ô∏è{parser_all_station(*adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[0])[1]}')
        await message.answer(
            text=f'{adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[1]} ‚ú® –í—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏üöè')
        await message.answer(
            text=f'‚¨ÖÔ∏è{parser_all_station(*adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[1])[0]}\n\n‚û°Ô∏è{parser_all_station(*adb.show_all_my_transport(*adb.give_user_id(message.from_user.id))[1])[1]}')


async def show_save_station(message: types.Message):
    if not adb.count_station(*adb.give_user_id(message.from_user.id)):
        await message.answer(text='‚ùå –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ ‚ùå')
    elif adb.count_station(*adb.give_user_id(message.from_user.id)) < 2:
        await message.answer(
            text=f'‚ú® –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[0][1]}\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ üöè {adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[0][2]}:')
        await message.answer(
            text=f"{parser_station_n(*adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[0])[1]}\n{parser_station_n(*adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[0])[0]}")
    else:
        await message.answer(
            text=f'‚ú® –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[0][1]}\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ üöè {adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[0][2]}:')
        await message.answer(
            text=f"{parser_station_n(*adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[0])[1]}\n{parser_station_n(*adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[0])[0]}")

        await message.answer(
            text=f'‚ú®  –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç {adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[1][1]}\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ üöè {adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[1][2]}:')
        await message.answer(
            text=f"{parser_station_n(*adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[1])[1]}\n{parser_station_n(*adb.show_all_my_station(*adb.give_user_id(message.from_user.id))[1])[0]}")


async def add_new_transport(message: types.Message):
    """ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç """
    if adb.count_transp(*adb.give_user_id(message.from_user.id)) < 2:
        await add_transport_start(message)
    else:
        await message.answer(text='‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 2-—É—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞‚ùå')


async def add_new_station(message: types.Message):
    """ –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç """
    if adb.count_station(*adb.give_user_id(message.from_user.id)) < 2:
        await add_station_start(message)
    else:
        await message.answer(text='‚ùå –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 2-—É—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ ‚ùå')


async def dell_save_transport(message: types.Message):
    """ –°–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ """
    if not adb.show_all_my_transport(*adb.give_user_id(message.from_user.id)):
        await message.answer(text='‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å ‚ùå')
    else:
        adb.dell_my_transport(*adb.give_user_id(message.from_user.id))
        await message.answer(text='‚ö†Ô∏è–£–¥–∞–ª–∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç')


async def dell_save_station(message: types.Message):
    """ –°–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ """
    if not adb.show_all_my_station(*adb.give_user_id(message.from_user.id)):
        await message.answer(text='‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ —á—Ç–æ–±—ã –∏—Ö —É–¥–∞–ª–∏—Ç—å ‚ùå')
    else:
        adb.dell_my_station(*adb.give_user_id(message.from_user.id))
        await message.answer(text='‚ö†Ô∏è–£–¥–∞–ª–∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É')


async def about_help(message: types.Message):
    await message.answer(text=
                         f'\n–ï—Å–ª–∏ –≤–≤–µ–¥–µ—à—å:'
                         f'\n‚û°Ô∏è –≤–∏–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–µ–±—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –µ–≥–æ –Ω–æ–º–µ—Ä - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–∞ –µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–µ'
                         f'\n‚û°Ô∏è –ü—Ä–∏–º–µ—Ä: –ê–≤—Ç–æ–±—É—Å 100'
                         f'\n‚û°Ô∏è –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –µ–≥–æ –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ - —É–≤–∏–¥–∏—à—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'
                         f'\n‚û°Ô∏è ‚òùÔ∏è–í–ê–ñ–ù–û: –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ –ü–ª–æ—â–∞–¥—å / –°—Ç–∞–Ω—Ü–∏—è –∏ —Ç.–¥, ‚ùóÔ∏è–ø–∏—Å–∞—Ç—å –Ω—É–∂–Ω–æ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ - –ù–µ–º–∏–≥–∞, –Ø–∫—É–±–∞, –ü–æ–±–µ–¥—ã‚ùóÔ∏èÔ∏è'
                         f'\n‚û°Ô∏è –ü—Ä–∏–º–µ—Ä: –ê–≤—Ç–æ–±—É—Å 100 –ö–æ–∑–ª–æ–≤–∞'
                         f'\n‚û°Ô∏è /tadd - –¥–æ–±–∞–≤–∏—à—å –¥–∞–ª–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ (–Ω–µ –±–æ–ª–µ–µ 2-—Ö)'
                         f'\n‚û°Ô∏è /sadd - –¥–æ–±–∞–≤–∏—à—å –¥–∞–ª–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ (–Ω–µ –±–æ–ª–µ–µ 2-—Ö)'
                         f'\n‚û°Ô∏è /all - –ø–æ–ª—É—á–∏—à—å –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞'
                         f'\n‚û°Ô∏è /live - —É–∑–Ω–∞–µ—à—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å –∏–∑–±—Ä–∞–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'
                         f'\n‚û°Ô∏è /tdell - —É–¥–∞–ª–∏—à—å –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'
                         f'\n‚û°Ô∏è /sdell - —É–¥–∞–ª–∏—à—å –∏–∑–±—Ä–∞–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É'
                         f'\n–£–¥–∞—á–∏ –∏ –≤ –ø—É—Ç—å!üòä')
